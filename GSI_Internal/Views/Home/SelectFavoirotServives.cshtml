@using GSI_Internal.Repositry.AssignRequirmentToItemRepo
@using GSI_Internal.Repositry.RequirementsRepo
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using GSI_Internal.Entites
@using GSI_Internal.Repositry.AssignInquireytToItemRepo
@using GSI_Internal.Repositry.AssignSelectionToItem_Repo
@using GSI_Internal.Repositry.RequestSelection_GroupRepo
@using GSI_Internal.Repositry.TransactionItemInquiryRepo
@using GSI_Internal.Repositry.TransiactionItem_Selection_Repo
@using System.Security.Claims
@using GSI_Internal.Repositry.ApplicationTransaction_RequestRepo
@using GSI_Internal.Repositry.RequirmentsFileAttachmentRepo
@model List<TransactionItemVM>
@inject IAssignRequirmentToItemRepo assignRequirmentToItemRepo
@inject IRequirementsRepo requirementsRepo

@inject IAssignInquireytToItemRepo assignInquireytToItemRepo
@inject IRequirmentsFileAttachmentRepo requirmentsFileAttachmentRepo;

@inject IApplicationTransaction_RequestRepo applicationTransactionRequestRepo
@inject ITransactionItemInquiryReop transactionItemInquiryRepo

@inject ITransiactionItem_SelectionRepo TransiactionItemSelectionRepo
@inject IAssignSelectionToItemRepo AssignSelectionToItemRepo
@inject IRequestSelection_GroupRepo _selectionGroupRepo

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@{
    ViewData["Title"] = "SelectFavoirotServives";
    Layout = "~/Views/Shared/_Layout.cshtml";
    
    //<style>
    //    .container,
    //    .container-lg,
    //    .container-md,
    //    .container-sm,
    //    .container-xl {
    //        max-width: 1334px;
    //    }
    //</style>
   
}


<div class="page-wrapper">
<section class="blog-single">
<form asp-action="Create" asp-controller="ApplicationTransaction_Request" enctype="multipart/form-data" class="form-horizontal">
    <div class="container">
@foreach (var item in Model)
{
     <div class="row post-single">

                    <div class="content-column col-lg-3 col-md-12 col-sm-12">
                            <img src="~/Image/ItemTransPhoto/@item.ServicesPhoto" class="h-230 img-fluid" alt="">
                        <div class="btn-box mt-3"><a href="index.html" class="theme-btn btn-style-three">Google play<i
                                    class="fa-brands fa-google-play ml-5"></i></a></div>
                        <div class="btn-box mt-3"><a href="index.html" class="theme-btn btn-style-three">App store<i
                                    class="fa-brands fa-app-store ml-5"></i></a></div>
                        <ul class="social-icon-one mt-3">
                            <li><a href="#"><span class="fab fa-facebook"></span></a></li>
                            <li><a href="#"><span class="fab fa-twitter"></span></a></li>
                            <li><a href="#"><span class="fab fa-instagram"></span></a></li>
                        </ul>

                    </div>

                    <div class="content-column col-lg-9 col-md-12 col-sm-12">
                        <!-- Post Single -->
                        <div>
                            <h4> <span class="fab fa-facebook"></span> @item.TransactionNameEnglish</h4>
                            <p><strong>@item.TransactionGroupNameEnglish /</strong> @item.TransactionSubGroupNameEnglish
                            </p>
                            <h4> <span class="fab fa-facebook"></span> Description</h4>
                            <p>@item.ServicesDecription_English</p>
                            <h4> <span class="fab fa-facebook"></span> Conditions</h4>
                            <pre style="font-family: 'Mulish', sans-serif; height: auto; max-height: 500px; white-space: pre-wrap;">
     ​@if (@item.Services_Conditions_English != null)
                                    {
                                        @item.Services_Conditions_English.Replace("\n", "\r\n")
                                    }
</pre>
                            <h4><span class="fab fa-facebook"></span> Requirements</h4>
                            @foreach (var items in item.AssignRequirmentToItemVM)
                            {
                                    <p>@items.Requirements_English</p>
                            }
                           
                            <h4> <span class="fab fa-facebook"></span> Fees</h4>
                                <p> Government Fees @item.GovernmentFees AED - Services Fees :  @item.Price AED</p>
                            <h4> <span class="fab fa-facebook"></span> Services Time:</h4>
                            <p> 1 day</p>
                        </div>



                        <!-- Comments Form Widget -->
                     
                    </div>

     </div>

    <partial name="_CreateTransactionFromFavouirt" model="new ApplicationTrans_RequestVM() {
TransiactionItem_Code = item.ID, RequirmentsFileAttachmentVM = assignRequirmentToItemRepo.GetAll().Where(r => r.TransactionItemID == item.ID).Select(c => new RequirmentsFileAttachmentVM() { RequireID = c.RequirmentID, RequireName_Arabic = requirementsRepo.GetAll().Where(x => x.ID == c.RequirmentID).Select(a => a.RequirementName_Arabic).FirstOrDefault(), RequireName_English = requirementsRepo.GetAll().Where(x => x.ID == c.RequirmentID).Select(a => a.RequirementName_English).FirstOrDefault(), FileHistoryName = requirmentsFileAttachmentRepo.GetAll().Where(r => r.RequireID == c.RequirmentID && r.UserID == User.FindFirstValue(ClaimTypes.NameIdentifier) && r.FileName != null).Select(a => new RequirmentsFileAttachmentVM() { RequireID = a.RequireID, FileName = a.FileName, RequireName_Arabic = requirementsRepo.GetAll().Where(x => x.ID == c.RequirmentID).Select(a => a.RequirementName_Arabic).FirstOrDefault(), RequireName_English = requirementsRepo.GetAll().Where(x => x.ID == c.RequirmentID).Select(a => a.RequirementName_English).FirstOrDefault(), AppDateTime = applicationTransactionRequestRepo.GetAll().Where(t => t.ID == a.App_Code).Select(a => a.The_Date).FirstOrDefault() } ) }).ToList(), RequestInquiry_Answer_VM = assignInquireytToItemRepo.GetAll().Where(n => n.TransactionItemID == item.ID).Select(m => new RequestInquiry_Answer_VM() { InquiryID = m.InquiryID, InquiryName_Arabic = transactionItemInquiryRepo.GetAll().Where(s => s.ID == m.InquiryID).Select(c => c.InquiryName_Arabic).FirstOrDefault(), InquiryName_English = transactionItemInquiryRepo.GetAll().Where(s => s.ID == m.InquiryID).Select(c => c.InquiryName_English).FirstOrDefault(), Inquiry_Type = transactionItemInquiryRepo.GetAll().Where(s => s.ID == m.InquiryID).Select(c => c.Inquiry_Type).FirstOrDefault() }).ToList(), RequestSelectionVM = AssignSelectionToItemRepo.GetAll().Where(n => n.TransactionItemID == item.ID).Select( m => new RequestSelectionVM() { SelectionID = m.SelectionID, SelectionName_Arabic = TransiactionItemSelectionRepo.GetAll().Where(s => s.ID == m.SelectionID) .Select(c => c.SelectionName_Arabic).FirstOrDefault(), SelectionName_English = TransiactionItemSelectionRepo.GetAll().Where(s => s.ID == m.SelectionID) .Select(c => c.SelectionName_English).FirstOrDefault(), SelectionGroupID = (from i in TransiactionItemSelectionRepo.GetAll() join g in _selectionGroupRepo.GetAll() on i.SelectionGroupID equals g.ID select i.SelectionGroupID).FirstOrDefault(), Selection_GroupName_English = (from i in TransiactionItemSelectionRepo.GetAll() join g in _selectionGroupRepo.GetAll() on i.SelectionGroupID equals g.ID select g.Selection_GroupName_English).FirstOrDefault(), Selection_GroupName_Arab = (from i in TransiactionItemSelectionRepo.GetAll() join g in _selectionGroupRepo.GetAll() on i.SelectionGroupID equals g.ID select g.Selection_GroupName_Arab).FirstOrDefault() }).ToList() }"></partial>
}


</div>
</form>
</section>
</div>
  
  @section Scripts {

      <script>
          $(function() {
            (function ($) {
                var CheckboxDropdown = function (el) {
                    var _this = this;
                    this.isOpen = false;
                    this.areAllChecked = false;
                    this.$el = $(el);
                    this.$label = this.$el.find('.dropdown-label');
                    this.$checkAll = this.$el.find('[data-toggle="check-all"]').first();
                    this.$inputs = this.$el.find('[type="checkbox"]');

                    this.onCheckBox();

                    this.$label.on('click', function (e) {
                        e.preventDefault();
                        _this.toggleOpen();
                    });

                    this.$checkAll.on('click', function (e) {
                        e.preventDefault();
                        _this.onCheckAll();
                    });

                    this.$inputs.on('change', function (e) {
                        _this.onCheckBox();
                    });
                };

                CheckboxDropdown.prototype.onCheckBox = function () {
                    this.updateStatus();
                };

                CheckboxDropdown.prototype.updateStatus = function () {
                    var checked = this.$el.find(':checked');

                    this.areAllChecked = false;
                    this.$checkAll.html('Check All');

                    if (checked.length <= 0) {
                        this.$label.html('Select Options');
                    }
                    else if (checked.length === 1) {
                        this.$label.html(checked.parent('label').text());
                    }
                    else if (checked.length === this.$inputs.length) {
                        this.$label.html('All Selected');
                        this.areAllChecked = true;
                        this.$checkAll.html('Uncheck All');
                    }
                    else {
                        this.$label.html(checked.length + ' Selected');
                    }
                };

                CheckboxDropdown.prototype.onCheckAll = function (checkAll) {
                    if (!this.areAllChecked || checkAll) {
                        this.areAllChecked = true;
                        this.$checkAll.html('Uncheck All');
                        this.$inputs.prop('checked', true);
                    }
                    else {
                        this.areAllChecked = false;
                        this.$checkAll.html('Check All');
                        this.$inputs.prop('checked', false);
                    }

                    this.updateStatus();
                };

                CheckboxDropdown.prototype.toggleOpen = function (forceOpen) {
                    var _this = this;

                    if (!this.isOpen || forceOpen) {
                        this.isOpen = true;
                        this.$el.addClass('on');
                        $(document).on('click', function (e) {
                            if (!$(e.target).closest('[data-control]').length) {
                                _this.toggleOpen();
                            }
                        });
                    }
                    else {
                        this.isOpen = false;
                        this.$el.removeClass('on');
                        $(document).off('click');
                    }
                };

                var checkboxesDropdowns = document.querySelectorAll('[data-control="checkbox-dropdown"]');
                for (var i = 0, length = checkboxesDropdowns.length; i < length; i++) {
                    new CheckboxDropdown(checkboxesDropdowns[i]);
                }
            })(jQuery);


            $("#tblBody").on("click", ".btnAdd", function () {
                var  tr = $(this).closest('tr');
                var requireID = tr.find('td:eq(0) input').val();

                var FileNameFormFile = tr.find('td:eq(2) input')[0].files[0];
              
                var formdata = new FormData();

                formdata.append("FileNameFormFile", FileNameFormFile);
                formdata.append("requireID", requireID);
               

               
                $.ajax({
                    type: "POST",
                    url: '@Url.Content("~/")' + "ApplicationTransaction_Request/AjaxUpload",
                    data: formdata,

                    contentType: false,
                    processData: false,
                    success: function(result) {
                         tr.find
                    },
                    error: function (result) { console.log(result); }
                });
                
              
            });




              $('#btnSubmit').click(function () {
                      $('.spinner').css('display', 'block');
                  });


            

              $('.select2bs4').select2({
                  theme: 'bootstrap4'
              });
              $('.FileHistoryName').multiselect(false);
          });
      </script>
  }
<style>
    .center-div {
        width: 300px;
        height: 300px;
        position: absolute;
        left: 50%;
        top: 50%;
        margin-left: -150px;
        margin-top: -150px;
    }

    .spinner {
        position: fixed;
        z-index: 999;
        height: 100%;
        width: 100%;
        top: 0;
        left: 0;
        background-color: Black;
        filter: alpha(opacity=60);
        opacity: 0.6;
        -moz-opacity: 0.8;
    }
    .loader {
        margin: auto;
        border: 16px solid #f3f3f3;
        border-radius: 50%;
        border-top: 16px solid #15a0ec;
        border-bottom: 16px solid #15a0ec;
        width: 120px;
        height: 120px;
        -webkit-animation: spin 2s linear infinite;
        animation: spin 2s linear infinite;
    }

    .inner-div {
        background-color: white;
        border-radius: 15px;
        margin: auto;
        padding: 2%;
        width: 150px;
    }

    @@-webkit-keyframes spin {
        0% {
            -webkit-transform: rotate(0deg);
        }

        100% {
            -webkit-transform: rotate(360deg);
        }
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }
    input[type="file"]::file-selector-button {
        border: 4px double #cccccc;
        padding: 0.2em 0.4em;
        border-radius: 0.2em;
        @*background-color: #a29bfe;*@
        transition: 1s;
        font-size: 10px;
       

       
    }

    input[type="file"]::-ms-browse:hover {
        background-color: #bdb76b;
        border:4px double #cccccc;
    }

    input[type="file"]::-webkit-file-upload-button:hover {
        background-color: #bdb76b;
        border: 4px double #cccccc;
    }

    input[type="file"]::file-selector-button:hover {
        background-color: #bdb76b;
        border: 4px double #cccccc;
    }
</style>



       

