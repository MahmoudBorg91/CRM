// <auto-generated />
using System;
using GSI_Internal.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GSI_Internal.Migrations
{
    [DbContext(typeof(dbContainer))]
    [Migration("20230110134611_AddTypetoItemService")]
    partial class AddTypetoItemService
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GSI_Internal.Entites.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("RoleNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("GSI_Internal.Entites.ApplicationTransaction_Request", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientLastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("ClientNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsProsessByUser")
                        .HasColumnType("int");

                    b.Property<int>("Move_Type")
                        .HasColumnType("int");

                    b.Property<string>("NumberOfTransiactionOfEntity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProsessID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TarnferUserFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("The_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransferUserTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransiactionItem_Code")
                        .HasColumnType("int");

                    b.Property<decimal>("TransiactionItem_GovernmentFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransiactionItem_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TransiactionItem_Net")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TransiactionItem_Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserProsessID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("files")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("tbl_ApplicationTransaction_Request");
                });

            modelBuilder.Entity("GSI_Internal.Entites.ApplicationTransaction_Request_Log", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<Guid>("App_Code")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("File_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("File_Processing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Item_code")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfTransiactionOfEntity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status_From")
                        .HasColumnType("int");

                    b.Property<int>("Status_TO")
                        .HasColumnType("int");

                    b.Property<DateTime>("The_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("User_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("App_Code");

                    b.ToTable("tbl_ApplicationTransaction_Request_Log");
                });

            modelBuilder.Entity("GSI_Internal.Entites.ApplicationTransaction_Request_Processing", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("ActiveStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("App_Code")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTransactionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTransactionTimeToProcess")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTransactionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("App_Code");

                    b.ToTable("tbl_ApplicationTransaction_Request_Processing");
                });

            modelBuilder.Entity("GSI_Internal.Entites.ApplicationTransfer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<Guid>("App_Code")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("Transfer_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("userFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userTo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("App_Code");

                    b.ToTable("tbl_ApplicationTransfer");
                });

            modelBuilder.Entity("GSI_Internal.Entites.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GSI_Internal.Entites.AssignInquiryToItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("InquiryID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionItemID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("InquiryID");

                    b.HasIndex("TransactionItemID");

                    b.ToTable("tbl_AssignInquiryToItem");
                });

            modelBuilder.Entity("GSI_Internal.Entites.AssignRequirmentToItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("RequirmentID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionItemID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RequirmentID");

                    b.HasIndex("TransactionItemID");

                    b.ToTable("tbl_AssignRequirmentToItem");
                });

            modelBuilder.Entity("GSI_Internal.Entites.AssignSelectionToItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("SelectionID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionItemID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SelectionID");

                    b.HasIndex("TransactionItemID");

                    b.ToTable("tbl_AssignSelectionToItem");
                });

            modelBuilder.Entity("GSI_Internal.Entites.client_wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequireID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TheDateFile")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RequireID");

                    b.ToTable("tbl_client_wallet");
                });

            modelBuilder.Entity("GSI_Internal.Entites.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaceBookLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstagramLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedInLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermsAndConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermsAndConditionsAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsAppNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YouTubeLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("GSI_Internal.Entites.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("GSI_Internal.Entites.NotificationConfirmed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationsConfirmed");
                });

            modelBuilder.Entity("GSI_Internal.Entites.RequestInquiry_Answer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<Guid>("App_Code")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InquiryID")
                        .HasColumnType("int");

                    b.Property<string>("Inquiry_Answer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("App_Code");

                    b.HasIndex("InquiryID");

                    b.ToTable("tbl_RequestInquiry_Answer");
                });

            modelBuilder.Entity("GSI_Internal.Entites.RequestSelection", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<Guid>("App_Code")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<int>("SelectionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("App_Code");

                    b.HasIndex("SelectionID");

                    b.ToTable("RequestSelection");
                });

            modelBuilder.Entity("GSI_Internal.Entites.RequestSelection_Group", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Selection_GroupName_Arab")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Selection_GroupName_English")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("tbl_RequestSelection_Group");
                });

            modelBuilder.Entity("GSI_Internal.Entites.Requirements", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("RequirementName_Arabic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequirementName_English")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("tbl_Requirements");
                });

            modelBuilder.Entity("GSI_Internal.Entites.RequirmentsFileAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("App_Code")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequireID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("App_Code");

                    b.HasIndex("RequireID");

                    b.ToTable("tbl_RequirmentsFileAttachment");
                });

            modelBuilder.Entity("GSI_Internal.Entites.SlideShow", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("ReSizeme_Arabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReSizeme_English")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowInMobile")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInWeb")
                        .HasColumnType("bit");

                    b.Property<string>("SlideImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title_Arabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title_English")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("tbl_SlideShow");
                });

            modelBuilder.Entity("GSI_Internal.Entites.StatusTransfer_Name", b =>
                {
                    b.Property<int>("StatusAction_Code")
                        .HasColumnType("int");

                    b.Property<string>("StatusAction_Name")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("tbl_StatusTransfer_Name");
                });

            modelBuilder.Entity("GSI_Internal.Entites.TransactionGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsNotAvailbale")
                        .HasColumnType("bit");

                    b.Property<string>("TransactionGroup_NameArabic")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionGroup_NameEnglish")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("logo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("tbl_TransactionGroup");
                });

            modelBuilder.Entity("GSI_Internal.Entites.TransactionItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<decimal>("GovernmentFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsNotAvailbale")
                        .HasColumnType("bit");

                    b.Property<int>("ItemServiceType")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServicesDecription_Arabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServicesDecription_English")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServicesPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Services_Conditions_Arabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Services_Conditions_English")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SetInMostServices")
                        .HasColumnType("bit");

                    b.Property<bool>("SetInMostServices_INSubGroup")
                        .HasColumnType("bit");

                    b.Property<string>("Time_Services_Arabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time_Services_English")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionGroupID")
                        .HasColumnType("int");

                    b.Property<string>("TransactionNameArabic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionNameEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionSubGroupID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TransactionGroupID");

                    b.HasIndex("TransactionSubGroupID");

                    b.ToTable("tbl_TransactionItem");
                });

            modelBuilder.Entity("GSI_Internal.Entites.TransactionItem_Type", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameArabic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("tbl_TransactionItem_Type");
                });

            modelBuilder.Entity("GSI_Internal.Entites.TransactionItemInquiry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("InquiryName_Arabic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InquiryName_English")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Inquiry_Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("tbl_TransactionItemInquiry");
                });

            modelBuilder.Entity("GSI_Internal.Entites.TransactionSubGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("SubGroupNameArabic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubGroupNameEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionGroupID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TransactionGroupID");

                    b.ToTable("tbl_TransactionSubGroup");
                });

            modelBuilder.Entity("GSI_Internal.Entites.TransiactionItem_Selection", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("SelectionGroupID")
                        .HasColumnType("int");

                    b.Property<string>("SelectionName_Arabic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectionName_English")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("SelectionGroupID");

                    b.ToTable("tbl_TransiactionItem_Selection");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GSI_Internal.Entites.ApplicationTransaction_Request_Log", b =>
                {
                    b.HasOne("GSI_Internal.Entites.ApplicationTransaction_Request", "ApplicationTransaction_Request")
                        .WithMany()
                        .HasForeignKey("App_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationTransaction_Request");
                });

            modelBuilder.Entity("GSI_Internal.Entites.ApplicationTransaction_Request_Processing", b =>
                {
                    b.HasOne("GSI_Internal.Entites.ApplicationTransaction_Request", "ApplicationTransaction_Request")
                        .WithMany()
                        .HasForeignKey("App_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationTransaction_Request");
                });

            modelBuilder.Entity("GSI_Internal.Entites.ApplicationTransfer", b =>
                {
                    b.HasOne("GSI_Internal.Entites.ApplicationTransaction_Request", "ApplicationTransaction_Request")
                        .WithMany()
                        .HasForeignKey("App_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationTransaction_Request");
                });

            modelBuilder.Entity("GSI_Internal.Entites.AssignInquiryToItem", b =>
                {
                    b.HasOne("GSI_Internal.Entites.TransactionItemInquiry", "TransactionItemInquiry")
                        .WithMany()
                        .HasForeignKey("InquiryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GSI_Internal.Entites.TransactionItem", "TransactionItem")
                        .WithMany("AssignInquiryToItems")
                        .HasForeignKey("TransactionItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransactionItem");

                    b.Navigation("TransactionItemInquiry");
                });

            modelBuilder.Entity("GSI_Internal.Entites.AssignRequirmentToItem", b =>
                {
                    b.HasOne("GSI_Internal.Entites.Requirements", "Requirements")
                        .WithMany()
                        .HasForeignKey("RequirmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GSI_Internal.Entites.TransactionItem", "TransactionItem")
                        .WithMany("AssignRequirmentToItems")
                        .HasForeignKey("TransactionItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requirements");

                    b.Navigation("TransactionItem");
                });

            modelBuilder.Entity("GSI_Internal.Entites.AssignSelectionToItem", b =>
                {
                    b.HasOne("GSI_Internal.Entites.TransiactionItem_Selection", "TransiactionItem_Selection")
                        .WithMany()
                        .HasForeignKey("SelectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GSI_Internal.Entites.TransactionItem", "TransactionItem")
                        .WithMany("AssignSelectionToItems")
                        .HasForeignKey("TransactionItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransactionItem");

                    b.Navigation("TransiactionItem_Selection");
                });

            modelBuilder.Entity("GSI_Internal.Entites.client_wallet", b =>
                {
                    b.HasOne("GSI_Internal.Entites.Requirements", "Requirements")
                        .WithMany()
                        .HasForeignKey("RequireID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("GSI_Internal.Entites.NotificationConfirmed", b =>
                {
                    b.HasOne("GSI_Internal.Entites.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GSI_Internal.Entites.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GSI_Internal.Entites.RequestInquiry_Answer", b =>
                {
                    b.HasOne("GSI_Internal.Entites.ApplicationTransaction_Request", "ApplicationTransaction_Request")
                        .WithMany("RequestInquiry_Answer")
                        .HasForeignKey("App_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GSI_Internal.Entites.TransactionItemInquiry", "TransactionItemInquiry")
                        .WithMany()
                        .HasForeignKey("InquiryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationTransaction_Request");

                    b.Navigation("TransactionItemInquiry");
                });

            modelBuilder.Entity("GSI_Internal.Entites.RequestSelection", b =>
                {
                    b.HasOne("GSI_Internal.Entites.ApplicationTransaction_Request", "ApplicationTransaction_Request")
                        .WithMany("RequestSelection")
                        .HasForeignKey("App_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GSI_Internal.Entites.TransiactionItem_Selection", "TransiactionItem_Selection")
                        .WithMany()
                        .HasForeignKey("SelectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationTransaction_Request");

                    b.Navigation("TransiactionItem_Selection");
                });

            modelBuilder.Entity("GSI_Internal.Entites.RequirmentsFileAttachment", b =>
                {
                    b.HasOne("GSI_Internal.Entites.ApplicationTransaction_Request", "ApplicationTransaction_Request")
                        .WithMany("RequirmentsFileAttachments")
                        .HasForeignKey("App_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GSI_Internal.Entites.Requirements", "Requirements")
                        .WithMany()
                        .HasForeignKey("RequireID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationTransaction_Request");

                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("GSI_Internal.Entites.TransactionItem", b =>
                {
                    b.HasOne("GSI_Internal.Entites.TransactionGroup", "TransactionGroup")
                        .WithMany("TransactionItems")
                        .HasForeignKey("TransactionGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GSI_Internal.Entites.TransactionSubGroup", "TransactionSubGroup")
                        .WithMany("TransactionItems")
                        .HasForeignKey("TransactionSubGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransactionGroup");

                    b.Navigation("TransactionSubGroup");
                });

            modelBuilder.Entity("GSI_Internal.Entites.TransactionSubGroup", b =>
                {
                    b.HasOne("GSI_Internal.Entites.TransactionGroup", "TransactionGroup")
                        .WithMany()
                        .HasForeignKey("TransactionGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransactionGroup");
                });

            modelBuilder.Entity("GSI_Internal.Entites.TransiactionItem_Selection", b =>
                {
                    b.HasOne("GSI_Internal.Entites.RequestSelection_Group", "RequestSelection_Group")
                        .WithMany()
                        .HasForeignKey("SelectionGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestSelection_Group");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("GSI_Internal.Entites.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GSI_Internal.Entites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GSI_Internal.Entites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("GSI_Internal.Entites.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GSI_Internal.Entites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GSI_Internal.Entites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GSI_Internal.Entites.ApplicationTransaction_Request", b =>
                {
                    b.Navigation("RequestInquiry_Answer");

                    b.Navigation("RequestSelection");

                    b.Navigation("RequirmentsFileAttachments");
                });

            modelBuilder.Entity("GSI_Internal.Entites.TransactionGroup", b =>
                {
                    b.Navigation("TransactionItems");
                });

            modelBuilder.Entity("GSI_Internal.Entites.TransactionItem", b =>
                {
                    b.Navigation("AssignInquiryToItems");

                    b.Navigation("AssignRequirmentToItems");

                    b.Navigation("AssignSelectionToItems");
                });

            modelBuilder.Entity("GSI_Internal.Entites.TransactionSubGroup", b =>
                {
                    b.Navigation("TransactionItems");
                });
#pragma warning restore 612, 618
        }
    }
}
